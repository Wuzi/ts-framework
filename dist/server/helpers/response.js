"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const HttpError_1 = require("../error/http/HttpError");
const HttpCode_1 = require("../error/http/HttpCode");
exports.default = {
    error(res) {
        return (error) => {
            if (error instanceof HttpError_1.default) {
                res.status(error.status).json(error.toJSON());
            }
            else if (typeof error === 'string') {
                res.status(HttpCode_1.HttpServerErrors.INTERNAL_SERVER_ERROR).json({
                    message: error,
                    stack: (new Error()).stack,
                    details: {},
                });
            }
            else {
                res.status(error.status || HttpCode_1.HttpServerErrors.INTERNAL_SERVER_ERROR).json({
                    message: error.message,
                    stack: error.stack,
                    details: error,
                });
            }
        };
    },
    success(res) {
        return (data = {}) => {
            let d = data;
            // If is array, iterate over the elements
            if (data && util.isArray(data)) {
                // Try to call toJSON of each element, if available
                // This will ease the work with Mongoose models as responses
                d = data.map(d => (d && util.isFunction(d.toJSON)) ? d.toJSON() : d);
            }
            else if (data && util.isFunction(data.toJSON)) {
                // Try to call toJSON of the response, if available
                // This will ease the work with Mongoose models as responses
                d = data.toJSON();
            }
            res.status(HttpCode_1.HttpSuccess.OK).json(d);
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc2VydmVyL2hlbHBlcnMvcmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFJN0IsdURBQStEO0FBQy9ELHFEQUF1RTtBQXNCdkUsa0JBQWU7SUFFYixLQUFLLENBQUMsR0FBYTtRQUNqQixNQUFNLENBQUMsQ0FBQyxLQUFpQyxFQUFFLEVBQUU7WUFDM0MsRUFBRSxDQUFDLENBQUMsS0FBSyxZQUFZLG1CQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzFELENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDckMsR0FBRyxDQUFDLE1BQU0sQ0FBQywyQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDdEQsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsS0FBSyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUs7b0JBQzFCLE9BQU8sRUFBRSxFQUFFO2lCQUNaLENBQUMsQ0FBQztZQUNMLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsTUFBTSxDQUFFLEtBQWEsQ0FBQyxNQUFNLElBQUksMkJBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQy9FLE9BQU8sRUFBRyxLQUFhLENBQUMsT0FBTztvQkFDL0IsS0FBSyxFQUFHLEtBQWEsQ0FBQyxLQUFLO29CQUMzQixPQUFPLEVBQUUsS0FBSztpQkFDZixDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFhO1FBQ25CLE1BQU0sQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBRWIseUNBQXlDO1lBQ3pDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsbURBQW1EO2dCQUNuRCw0REFBNEQ7Z0JBQzVELENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RSxDQUFDO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELG1EQUFtRDtnQkFDbkQsNERBQTREO2dCQUM1RCxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3BCLENBQUM7WUFFRCxHQUFHLENBQUMsTUFBTSxDQUFDLHNCQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCB7IExvZ2dlckluc3RhbmNlIH0gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgQmFzZUVycm9yIH0gZnJvbSAndHMtZnJhbWV3b3JrLWNvbW1vbic7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEh0dHBFcnJvciB9IGZyb20gJy4uL2Vycm9yL2h0dHAvSHR0cEVycm9yJztcbmltcG9ydCB7IEh0dHBTZXJ2ZXJFcnJvcnMsIEh0dHBTdWNjZXNzIH0gZnJvbSAnLi4vZXJyb3IvaHR0cC9IdHRwQ29kZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVJlcXVlc3QgZXh0ZW5kcyBSZXF1ZXN0IHtcbiAgZmlsZT86IGFueTtcbiAgdXNlcj86IGFueTtcbiAgbG9nZ2VyOiBMb2dnZXJJbnN0YW5jZTtcblxuICBwYXJhbShuYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVJlc3BvbnNlIGV4dGVuZHMgUmVzcG9uc2Uge1xuICBlcnJvcihzdGF0dXM6IG51bWJlciwgZXJyb3I6IEVycm9yKTogdm9pZDtcblxuICBlcnJvcihzdGF0dXM6IG51bWJlciwgZXJyb3I6IEJhc2VFcnJvcik6IHZvaWQ7XG5cbiAgZXJyb3Ioc3RhdHVzOiBudW1iZXIsIGVycm9yTWVzc2FnZTogc3RyaW5nKTogdm9pZDtcblxuICBlcnJvcihlcnJvcjogSHR0cEVycm9yKTogdm9pZDtcblxuICBzdWNjZXNzKGRhdGE/OiBhbnkpOiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgZXJyb3IocmVzOiBSZXNwb25zZSkge1xuICAgIHJldHVybiAoZXJyb3I6IFN0cmluZyB8IEVycm9yIHwgSHR0cEVycm9yKSA9PiB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3IpIHtcbiAgICAgICAgcmVzLnN0YXR1cyhlcnJvci5zdGF0dXMgYXMgbnVtYmVyKS5qc29uKGVycm9yLnRvSlNPTigpKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXMuc3RhdHVzKEh0dHBTZXJ2ZXJFcnJvcnMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICAgICAgICBzdGFjazogKG5ldyBFcnJvcigpKS5zdGFjayxcbiAgICAgICAgICBkZXRhaWxzOiB7fSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzKChlcnJvciBhcyBhbnkpLnN0YXR1cyB8fCBIdHRwU2VydmVyRXJyb3JzLklOVEVSTkFMX1NFUlZFUl9FUlJPUikuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogKGVycm9yIGFzIGFueSkubWVzc2FnZSxcbiAgICAgICAgICBzdGFjazogKGVycm9yIGFzIGFueSkuc3RhY2ssXG4gICAgICAgICAgZGV0YWlsczogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG5cbiAgc3VjY2VzcyhyZXM6IFJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIChkYXRhOiBhbnkgPSB7fSkgPT4ge1xuICAgICAgbGV0IGQgPSBkYXRhO1xuXG4gICAgICAvLyBJZiBpcyBhcnJheSwgaXRlcmF0ZSBvdmVyIHRoZSBlbGVtZW50c1xuICAgICAgaWYgKGRhdGEgJiYgdXRpbC5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIC8vIFRyeSB0byBjYWxsIHRvSlNPTiBvZiBlYWNoIGVsZW1lbnQsIGlmIGF2YWlsYWJsZVxuICAgICAgICAvLyBUaGlzIHdpbGwgZWFzZSB0aGUgd29yayB3aXRoIE1vbmdvb3NlIG1vZGVscyBhcyByZXNwb25zZXNcbiAgICAgICAgZCA9IGRhdGEubWFwKGQgPT4gKGQgJiYgdXRpbC5pc0Z1bmN0aW9uKGQudG9KU09OKSkgPyBkLnRvSlNPTigpIDogZCk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEgJiYgdXRpbC5pc0Z1bmN0aW9uKGRhdGEudG9KU09OKSkge1xuICAgICAgICAvLyBUcnkgdG8gY2FsbCB0b0pTT04gb2YgdGhlIHJlc3BvbnNlLCBpZiBhdmFpbGFibGVcbiAgICAgICAgLy8gVGhpcyB3aWxsIGVhc2UgdGhlIHdvcmsgd2l0aCBNb25nb29zZSBtb2RlbHMgYXMgcmVzcG9uc2VzXG4gICAgICAgIGQgPSBkYXRhLnRvSlNPTigpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXMuc3RhdHVzKEh0dHBTdWNjZXNzLk9LKS5qc29uKGQpO1xuICAgIH07XG4gIH0sXG59O1xuIl19