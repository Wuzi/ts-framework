"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const HttpError_1 = require("../../error/http/HttpError");
const HttpCode_1 = require("../../error/http/HttpCode");
exports.default = {
    error(res) {
        return (error) => {
            if (error instanceof HttpError_1.default) {
                res.status(error.status).json(error.toJSON());
            }
            else if (typeof error === 'string') {
                res.status(HttpCode_1.HttpServerErrors.INTERNAL_SERVER_ERROR).json({
                    message: error,
                    stack: (new Error()).stack,
                    details: {},
                });
            }
            else {
                res.status(error.status || HttpCode_1.HttpServerErrors.INTERNAL_SERVER_ERROR).json({
                    message: error.message,
                    stack: error.stack,
                    details: error,
                });
            }
        };
    },
    success(res) {
        return (data = {}) => {
            let d = data;
            // If is array, iterate over the elements
            if (data && util.isArray(data)) {
                // Try to call toJSON of each element, if available
                // This will ease the work with Mongoose models as responses
                d = data.map(d => (d && util.isFunction(d.toJSON)) ? d.toJSON() : d);
            }
            else if (data && util.isFunction(data.toJSON)) {
                // Try to call toJSON of the response, if available
                // This will ease the work with Mongoose models as responses
                d = data.toJSON();
            }
            res.status(HttpCode_1.HttpSuccess.OK).json(d);
        };
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tcG9uZW50cy9oZWxwZXJzL3Jlc3BvbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBSTdCLDBEQUFrRTtBQUNsRSx3REFBMEU7QUFvQjFFLGtCQUFlO0lBRWIsS0FBSyxDQUFDLEdBQWE7UUFDakIsT0FBTyxDQUFDLEtBQWlDLEVBQUUsRUFBRTtZQUMzQyxJQUFJLEtBQUssWUFBWSxtQkFBUyxFQUFFO2dCQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2FBQ3pEO2lCQUFNLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO2dCQUNwQyxHQUFHLENBQUMsTUFBTSxDQUFDLDJCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDO29CQUN0RCxPQUFPLEVBQUUsS0FBSztvQkFDZCxLQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSztvQkFDMUIsT0FBTyxFQUFFLEVBQUU7aUJBQ1osQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBRSxLQUFhLENBQUMsTUFBTSxJQUFJLDJCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDO29CQUMvRSxPQUFPLEVBQUcsS0FBYSxDQUFDLE9BQU87b0JBQy9CLEtBQUssRUFBRyxLQUFhLENBQUMsS0FBSztvQkFDM0IsT0FBTyxFQUFFLEtBQUs7aUJBQ2YsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQWE7UUFDbkIsT0FBTyxDQUFDLE9BQVksRUFBRSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBRWIseUNBQXlDO1lBQ3pDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzlCLG1EQUFtRDtnQkFDbkQsNERBQTREO2dCQUM1RCxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEU7aUJBQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9DLG1EQUFtRDtnQkFDbkQsNERBQTREO2dCQUM1RCxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQ25CO1lBRUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxzQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBMb2dnZXJJbnN0YW5jZSB9IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJ3RzLWZyYW1ld29yay1jb21tb24nO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBIdHRwRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvci9odHRwL0h0dHBFcnJvcic7XG5pbXBvcnQgeyBIdHRwU2VydmVyRXJyb3JzLCBIdHRwU3VjY2VzcyB9IGZyb20gJy4uLy4uL2Vycm9yL2h0dHAvSHR0cENvZGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VSZXF1ZXN0IGV4dGVuZHMgUmVxdWVzdCB7XG4gIHVzZXI/OiBhbnk7XG4gIGxvZ2dlcjogTG9nZ2VySW5zdGFuY2U7XG4gIHBhcmFtKG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlUmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG4gIGVycm9yKHN0YXR1czogbnVtYmVyLCBlcnJvcjogRXJyb3IpOiB2b2lkO1xuXG4gIGVycm9yKHN0YXR1czogbnVtYmVyLCBlcnJvcjogQmFzZUVycm9yKTogdm9pZDtcblxuICBlcnJvcihzdGF0dXM6IG51bWJlciwgZXJyb3JNZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIGVycm9yKGVycm9yOiBIdHRwRXJyb3IpOiB2b2lkO1xuXG4gIHN1Y2Nlc3MoZGF0YT86IGFueSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBlcnJvcihyZXM6IFJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIChlcnJvcjogU3RyaW5nIHwgRXJyb3IgfCBIdHRwRXJyb3IpID0+IHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvcikge1xuICAgICAgICByZXMuc3RhdHVzKGVycm9yLnN0YXR1cyBhcyBudW1iZXIpLmpzb24oZXJyb3IudG9KU09OKCkpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoSHR0cFNlcnZlckVycm9ycy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICAgIHN0YWNrOiAobmV3IEVycm9yKCkpLnN0YWNrLFxuICAgICAgICAgIGRldGFpbHM6IHt9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zdGF0dXMoKGVycm9yIGFzIGFueSkuc3RhdHVzIHx8IEh0dHBTZXJ2ZXJFcnJvcnMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAoZXJyb3IgYXMgYW55KS5tZXNzYWdlLFxuICAgICAgICAgIHN0YWNrOiAoZXJyb3IgYXMgYW55KS5zdGFjayxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvcixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBzdWNjZXNzKHJlczogUmVzcG9uc2UpIHtcbiAgICByZXR1cm4gKGRhdGE6IGFueSA9IHt9KSA9PiB7XG4gICAgICBsZXQgZCA9IGRhdGE7XG5cbiAgICAgIC8vIElmIGlzIGFycmF5LCBpdGVyYXRlIG92ZXIgdGhlIGVsZW1lbnRzXG4gICAgICBpZiAoZGF0YSAmJiB1dGlsLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgLy8gVHJ5IHRvIGNhbGwgdG9KU09OIG9mIGVhY2ggZWxlbWVudCwgaWYgYXZhaWxhYmxlXG4gICAgICAgIC8vIFRoaXMgd2lsbCBlYXNlIHRoZSB3b3JrIHdpdGggTW9uZ29vc2UgbW9kZWxzIGFzIHJlc3BvbnNlc1xuICAgICAgICBkID0gZGF0YS5tYXAoZCA9PiAoZCAmJiB1dGlsLmlzRnVuY3Rpb24oZC50b0pTT04pKSA/IGQudG9KU09OKCkgOiBkKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSAmJiB1dGlsLmlzRnVuY3Rpb24oZGF0YS50b0pTT04pKSB7XG4gICAgICAgIC8vIFRyeSB0byBjYWxsIHRvSlNPTiBvZiB0aGUgcmVzcG9uc2UsIGlmIGF2YWlsYWJsZVxuICAgICAgICAvLyBUaGlzIHdpbGwgZWFzZSB0aGUgd29yayB3aXRoIE1vbmdvb3NlIG1vZGVscyBhcyByZXNwb25zZXNcbiAgICAgICAgZCA9IGRhdGEudG9KU09OKCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJlcy5zdGF0dXMoSHR0cFN1Y2Nlc3MuT0spLmpzb24oZCk7XG4gICAgfTtcbiAgfSxcbn07XG4iXX0=